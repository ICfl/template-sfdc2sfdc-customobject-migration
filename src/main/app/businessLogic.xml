<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.7.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/stdio http://www.mulesoft.org/schema/mule/stdio/current/mule-stdio.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<batch:job name="migrateCustomObjectsBatch">
		<batch:threading-profile poolExhaustedAction="WAIT" />
		<batch:input>
			<sfdc:query config-ref="SalesforceA"
				query="dsql:SELECT Name, LastModifiedDate, interpreter__c, year__c FROM MusicAlbum__c WHERE year__c > 1968"
				doc:name="query CustomObjects from Salesforce instance A" fetchSize="${page.size}" />
		</batch:input>
		<batch:process-records>
			<batch:step name="getCustomObjectInBStep">
				<enricher source="#[payload == null ? null : payload['Id'] ]" target="#[payload['Id']]"
					doc:name="store result in payload 'Id' field">
					<sfdc:query-single config-ref="SalesforceB"
						query="SELECT Id FROM MusicAlbum__c WHERE Name = '#[payload['Name']]'"
						doc:name="query customObject in Salesforce instance B" />
				</enricher>

			</batch:step>
			<batch:step name="createCustomObjectsInBStep"
				accept-expression="payload != null">

				<batch:commit size="200" doc:name="Batch Commit">
                    <dw:transform-message doc:name="prepare customObjects for upsert">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Id: $.Id,
	Name: $.Name,
	interpreter__c: $.interpreter__c
	// TODO - Here you should remove all custom fields that don't exist in the target system and map the ones that vary in type/format
}
]]></dw:set-payload>
                    </dw:transform-message>
                    <logger message="CustomObjects for upsert = #[payload]" level="INFO" doc:name="log CustomObjects for upsert"/>
					<sfdc:upsert config-ref="SalesforceB" type="MusicAlbum__c"
						doc:name="upsert CustomObjects in org B" externalIdFieldName="Id">
						<sfdc:objects ref="#[payload]" />
					</sfdc:upsert>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<scatter-gather doc:name="All">
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<logger message="Migration process has finished: #[payload]"
						level="INFO" doc:name="log 'Migration process has finished'" />
				</processor-chain>
				<processor-chain>
					<json:object-to-json-transformer
						doc:name="transform BatchJobInstance to JSON" />
					<smtp:outbound-endpoint host="${smtp.host}"
						port="${smtp.port}" user="${smtp.user}" password="${smtp.password}"
						to="${mail.to}" from="${mail.from}" subject="${mail.subject}"
						responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail" />
				</processor-chain>
			</scatter-gather>
		</batch:on-complete>
	</batch:job>
	<flow name="mainFlow"  processingStrategy="synchronous"
		doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
		<batch:execute name="migrateCustomObjectsBatch"
			doc:name="trigger migrateCustomObjectsBatch" />
		<exception-strategy ref="defaultChoiceExceptionStrategy"
			doc:name="catch Exception and call defaultChoiceExceptionStrategy" />
	</flow>


</mule>
